{"ast":null,"code":"var _jsxFileName = \"D:\\\\Clases\\\\Programacion Web II\\\\PW2_Project\\\\pw2\\\\front\\\\src\\\\Explore.js\",\n  _s = $RefreshSig$();\nimport 'bootstrap/dist/css/bootstrap.css';\n//import styles from './paginaWeb/css/dashboard.module.css';\nimport React, { useState, useEffect } from 'react';\nimport Masonry from 'masonry-layout';\n//import Axios from 'axios';\nimport axiosInstance from './AxiosConf/axiosconf';\n//import { Link } from 'react-router-dom';\n\n//Componentes\nimport CardContainer from './components/cardContainerDashboard';\nimport Menu from './components/menuComponent';\nimport { usePerfil } from './components/publicacionUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Explore() {\n  _s();\n  const [allImg, setAllImg] = useState([]);\n  const [base64Images, setBase64Images] = useState([]);\n  const perfil = usePerfil();\n\n  //Obtiene valores de las fotos y demás cosas de la base de datos\n  useEffect(() => {\n    axiosInstance.get(\"http://localhost:3001/getnewtoold\").then(response => {\n      if (response.data === \"No imagen\") {\n        alert(\"No hay imágenes\");\n      } else {\n        setAllImg(response.data);\n        //console.log(response.data);\n      }\n    }).catch(error => {\n      console.error(\"Error fetching images:\", error);\n    });\n  }, []);\n  //Conversion de los valores a un base64\n  useEffect(() => {\n    const convertImagesToBase64 = async () => {\n      if (allImg.length > 0 && Array.isArray(allImg[0]) && allImg[0].length > 0) {\n        const base64Promises = allImg[0].map(val => {\n          const blob = new Blob([new Uint8Array(val.foto_publi.data)], {\n            type: 'image/jpeg'\n          });\n          const reader = new FileReader();\n          reader.readAsDataURL(blob);\n          return new Promise(resolve => {\n            reader.onloadend = () => {\n              resolve(reader.result.split(',')[1]);\n            };\n          });\n        });\n        try {\n          const base64Strings = await Promise.all(base64Promises);\n          setBase64Images(base64Strings);\n          //console.log(base64Strings); // Cambiado a log de base64Strings en lugar de base64Images\n        } catch (error) {\n          console.error(\"Error converting images to base64:\", error);\n        }\n      }\n    };\n    convertImagesToBase64(); // Llamamos a la función de conversión independientemente del tamaño de allImg\n  }, [allImg]);\n  //Masonry effect    \n  useEffect(() => {\n    const initializeMasonry = () => {\n      const grid = document.querySelector('.row-cols-md-3');\n      if (grid) {\n        const masonry = new Masonry(grid, {\n          itemSelector: '.col',\n          percentPosition: true\n        });\n        masonry.layout();\n      }\n    };\n    initializeMasonry();\n  }, [allImg]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Menu, {\n      perfil: perfil\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CardContainer, {\n      data: base64Images.map((base64String, index) => ({\n        imageUrl: base64String,\n        title: allImg[0][index].titulo_publi,\n        idPubli: allImg[0][index].id_publi\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Explore, \"2iY8O2eNBKvIHeR3oRcgHlemW3g=\", false, function () {\n  return [usePerfil];\n});\n_c = Explore;\nexport default Explore;\nvar _c;\n$RefreshReg$(_c, \"Explore\");","map":{"version":3,"names":["React","useState","useEffect","Masonry","axiosInstance","CardContainer","Menu","usePerfil","jsxDEV","_jsxDEV","Fragment","_Fragment","Explore","_s","allImg","setAllImg","base64Images","setBase64Images","perfil","get","then","response","data","alert","catch","error","console","convertImagesToBase64","length","Array","isArray","base64Promises","map","val","blob","Blob","Uint8Array","foto_publi","type","reader","FileReader","readAsDataURL","Promise","resolve","onloadend","result","split","base64Strings","all","initializeMasonry","grid","document","querySelector","masonry","itemSelector","percentPosition","layout","children","fileName","_jsxFileName","lineNumber","columnNumber","base64String","index","imageUrl","title","titulo_publi","idPubli","id_publi","_c","$RefreshReg$"],"sources":["D:/Clases/Programacion Web II/PW2_Project/pw2/front/src/Explore.js"],"sourcesContent":["import 'bootstrap/dist/css/bootstrap.css';\n//import styles from './paginaWeb/css/dashboard.module.css';\nimport React, { useState, useEffect } from 'react';\nimport Masonry from 'masonry-layout';\n//import Axios from 'axios';\nimport axiosInstance from './AxiosConf/axiosconf';\n//import { Link } from 'react-router-dom';\n\n//Componentes\nimport CardContainer from './components/cardContainerDashboard';\nimport Menu from './components/menuComponent';\nimport {usePerfil} from './components/publicacionUtils';\n\n\nfunction Explore() {\n\n\n    const [allImg, setAllImg] = useState([]);\n    const [base64Images, setBase64Images] = useState([]);\n\n    const perfil = usePerfil(); \n\n\n    //Obtiene valores de las fotos y demás cosas de la base de datos\n    useEffect(() => {\n        axiosInstance.get(\"http://localhost:3001/getnewtoold\")\n            .then((response) => {\n                if (response.data === \"No imagen\") {\n                    alert(\"No hay imágenes\");\n                } else {\n                    setAllImg(response.data);\n                    //console.log(response.data);\n                }\n            })\n            .catch((error) => {\n                console.error(\"Error fetching images:\", error);\n            });\n    }, []);\n    //Conversion de los valores a un base64\n    useEffect(() => {\n        const convertImagesToBase64 = async () => {\n            if (allImg.length > 0 && Array.isArray(allImg[0]) && allImg[0].length > 0) {\n                const base64Promises = allImg[0].map((val) => {\n                    const blob = new Blob([new Uint8Array(val.foto_publi.data)], { type: 'image/jpeg' });\n                    const reader = new FileReader();\n                    reader.readAsDataURL(blob);\n                    return new Promise((resolve) => {\n                        reader.onloadend = () => {\n                            resolve(reader.result.split(',')[1]);\n                        };\n                    });\n                });\n\n                try {\n                    const base64Strings = await Promise.all(base64Promises);\n                    setBase64Images(base64Strings);\n                    //console.log(base64Strings); // Cambiado a log de base64Strings en lugar de base64Images\n                } catch (error) {\n                    console.error(\"Error converting images to base64:\", error);\n                }\n            }\n        };\n\n        convertImagesToBase64(); // Llamamos a la función de conversión independientemente del tamaño de allImg\n\n    }, [allImg]);\n    //Masonry effect    \n    useEffect(() => {\n        const initializeMasonry = () => {\n            const grid = document.querySelector('.row-cols-md-3');\n            if (grid) {\n                const masonry = new Masonry(grid, {\n                    itemSelector: '.col',\n                    percentPosition: true\n                });\n                masonry.layout();\n            }\n        };\n\n        initializeMasonry();\n    }, [allImg]);\n\n\n\n\n    return (\n        <>\n\n            {/* <!-- Menú del apartado superior --> */}\n            {/* // Usando el componente del Menú */}\n            <Menu perfil={perfil} /> \n\n            {/* Renderiza el contenedor de tarjetas con los datos */}\n            <CardContainer data=\n                {base64Images.map((base64String, index) =>\n                (\n                    {\n                        imageUrl: base64String,\n                        title: allImg[0][index].titulo_publi,\n                        idPubli: allImg[0][index].id_publi\n                    }\n                ))\n                }\n            />\n\n\n\n        </>\n\n\n\n    );\n}\n\nexport default Explore"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}